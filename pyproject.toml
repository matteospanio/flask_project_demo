[tool.poetry]
name = "flask-project-demo"
version = "0.1.0"
description = "A demo flask project for teaching purposes"
authors = ["Matteo Spanio <spanio@dei.unipd.it>"]
license = "MIT"
readme = "README.md"

[tool.poetry.scripts]
server-cli = "flask_project_demo.cli:cli"

[tool.poetry.dependencies]
python = "^3.10"
Flask = "^3.0.2"
mkdocs = "^1.5.3"
sqlalchemy = "^2.0.29"
python-dotenv = "^1.0.1"
marshmallow = "^3.21.1"
flask-jwt-extended = "^4.6.0"


[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.0"
pytest = "^8.1.1"
ruff = "^0.3.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = ["tests"]

[tool.ruff]
line-length = 88
src = ["flask_project_demo", "tests"]
target-version = "py310"

[tool.ruff.lint]
fixable = ["ALL"]
select =[
    "A",    # builtins
    "B",    # bugbear
    "BLE",  # blind exception
    "C4",   # comprehensions
    "C90",
    "COM",  # commas
    "D",    # pydocstyle
    "E",    # pycodestyle
    "EM",   # error messages
    "F",    # pyflakes
    "G",    # logging
    "I",    # isort
    "PIE",  # flake-8 pie
    "PL",   # pylint
    "PT",   # pytest
    "PTH",  # use pathlib
    "N",    # pep-naming
    "RUF",  # ruff specific rules
    "S",    # bandit
    "SIM",  # flake8-simplify
    "UP",   # pyupgrade
    "W",    # pycodestyle warning
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.pylint]
max-args = 7
max-returns = 5

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["D", "RUF", "S", "A", "PLR6301"]

[tool.black]
line-length = 88
target-version = ["py310"]
